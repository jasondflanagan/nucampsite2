{"ast":null,"code":"import * as ActionTypes from './ActionTypes';\nimport { baseUrl } from '../shared/baseUrl';\nexport const addComment = (campsiteId, rating, author, text) => ({\n  type: ActionTypes.ADD_COMMENT,\n  payload: {\n    campsiteId: campsiteId,\n    rating: rating,\n    author: author,\n    text: text\n  }\n});\nexport const postComment = (campsiteId, rating, author, text) => dispatch => {\n  const newComment = {\n    campsiteId: campsiteId,\n    rating: rating,\n    author: author,\n    text: text\n  };\n  newComment.date = new Date().toISOString();\n  return fetch(baseUrl + 'comments', {\n    method: \"POST\",\n    body: JSON.stringify(newComment),\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }).then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    throw error;\n  }).then(response => response.json()).then(response => dispatch(addComment(response))).catch(error => {\n    console.log('post comment', error.message);\n    alert('Your comment could not be posted\\nError: ' + error.message);\n  });\n};\nexport const fetchCampsites = () => dispatch => {\n  dispatch(campsitesLoading());\n  return fetch(baseUrl + 'campsites').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(campsites => dispatch(addCampsites(campsites))).catch(error => dispatch(campsitesFailed(error.message)));\n};\nexport const campsitesLoading = () => ({\n  type: ActionTypes.CAMPSITES_LOADING\n});\nexport const campsitesFailed = errMess => ({\n  type: ActionTypes.CAMPSITES_FAILED,\n  payload: errMess\n});\nexport const addCampsites = campsites => ({\n  type: ActionTypes.ADD_CAMPSITES,\n  payload: campsites\n});\nexport const fetchComments = () => dispatch => {\n  return fetch(baseUrl + 'comments').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(comments => dispatch(addComments(comments))).catch(error => dispatch(commentsFailed(error.message)));\n};\nexport const commentsFailed = errMess => ({\n  type: ActionTypes.COMMENTS_FAILED,\n  payload: errMess\n});\nexport const addComments = comments => ({\n  type: ActionTypes.ADD_COMMENTS,\n  payload: comments\n});\nexport const fetchPromotions = () => dispatch => {\n  dispatch(promotionsLoading());\n  return fetch(baseUrl + 'promotions').then(response => {\n    if (response.ok) {\n      return response;\n    } else {\n      const error = new Error(`Error ${response.status}: ${response.statusText}`);\n      error.response = response;\n      throw error;\n    }\n  }, error => {\n    const errMess = new Error(error.message);\n    throw errMess;\n  }).then(response => response.json()).then(promotions => dispatch(addPromotions(promotions))).catch(error => dispatch(promotionsFailed(error.message)));\n};\nexport const promotionsLoading = () => ({\n  type: ActionTypes.PROMOTIONS_LOADING\n});\nexport const promotionsFailed = errMess => ({\n  type: ActionTypes.PROMOTIONS_FAILED,\n  payload: errMess\n});\nexport const addPromotions = promotions => ({\n  type: ActionTypes.ADD_PROMOTIONS,\n  payload: promotions\n});","map":{"version":3,"sources":["/Users/jasonflanagan/Desktop/NucampFolder/3-React/nucampsite/src/redux/ActionCreators.js"],"names":["ActionTypes","baseUrl","addComment","campsiteId","rating","author","text","type","ADD_COMMENT","payload","postComment","dispatch","newComment","date","Date","toISOString","fetch","method","body","JSON","stringify","headers","then","response","ok","error","Error","status","statusText","json","catch","console","log","message","alert","fetchCampsites","campsitesLoading","errMess","campsites","addCampsites","campsitesFailed","CAMPSITES_LOADING","CAMPSITES_FAILED","ADD_CAMPSITES","fetchComments","comments","addComments","commentsFailed","COMMENTS_FAILED","ADD_COMMENTS","fetchPromotions","promotionsLoading","promotions","addPromotions","promotionsFailed","PROMOTIONS_LOADING","PROMOTIONS_FAILED","ADD_PROMOTIONS"],"mappings":"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","sourcesContent":["import * as ActionTypes from './ActionTypes';\nimport {baseUrl} from '../shared/baseUrl';\n\nexport const addComment = (campsiteId, rating, author, text) => ({\n    type: ActionTypes.ADD_COMMENT,\n    payload: {\n        campsiteId: campsiteId,\n        rating: rating,\n        author: author,\n        text: text\n    }\n})\n\nexport const postComment = (campsiteId, rating, author, text) => dispatch =>{\n\n    const newComment = {\n        campsiteId: campsiteId,\n        rating: rating,\n        author: author,\n        text: text\n    }\n    newComment.date = new Date().toISOString()\n\n    return fetch(baseUrl+ 'comments', {\n        method: \"POST\",\n        body: JSON.stringify(newComment),\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(response =>{\n        if(response.ok){\n            return response\n        }\n        else {\n            const error = new Error(`Error ${response.status}: ${response.statusText}`)\n            error.response = response\n            throw error\n        }\n        },\n        error =>{throw error}\n    ).then(response => response.json()\n    ).then(response => dispatch(addComment(response))\n    ).catch(error => {\n        console.log('post comment', error.message);\n        alert('Your comment could not be posted\\nError: ' + error.message);\n    })\n\n}\n\nexport const fetchCampsites = () => dispatch => {\n    dispatch(campsitesLoading());\n\n    return fetch(baseUrl + 'campsites')\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(campsites => dispatch(addCampsites(campsites)))\n        .catch(error => dispatch(campsitesFailed(error.message)));\n}\n\nexport const campsitesLoading = () => ({\n    type: ActionTypes.CAMPSITES_LOADING\n})\n\nexport const campsitesFailed = errMess => ({\n    type: ActionTypes.CAMPSITES_FAILED,\n    payload: errMess\n})\n\nexport const addCampsites = campsites => ({\n    type: ActionTypes.ADD_CAMPSITES,\n    payload: campsites\n})\n\nexport const fetchComments = () => dispatch => {\n    return fetch(baseUrl + 'comments')\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(comments => dispatch(addComments(comments)))\n        .catch(error => dispatch(commentsFailed(error.message)));\n}\nexport const commentsFailed = errMess => ({\n    type:ActionTypes.COMMENTS_FAILED,\n    payload: errMess\n})\n\nexport const addComments = comments => ({\n    type: ActionTypes.ADD_COMMENTS,\n    payload: comments\n})\n\nexport const fetchPromotions = () => dispatch => {\n    dispatch(promotionsLoading());\n\n    return fetch(baseUrl + 'promotions')\n        .then(response => {\n                if (response.ok) {\n                    return response;\n                } else {\n                    const error = new Error(`Error ${response.status}: ${response.statusText}`);\n                    error.response = response;\n                    throw error;\n                }\n            },\n            error => {\n                const errMess = new Error(error.message);\n                throw errMess;\n            }\n        )\n        .then(response => response.json())\n        .then(promotions => dispatch(addPromotions(promotions)))\n        .catch(error => dispatch(promotionsFailed(error.message)));\n}\n\nexport const promotionsLoading = () => ({\n    type: ActionTypes.PROMOTIONS_LOADING\n})\n\nexport const promotionsFailed = errMess => ({\n    type: ActionTypes.PROMOTIONS_FAILED,\n    payload: errMess\n})\n\nexport const addPromotions = promotions => ({\n    type: ActionTypes.ADD_PROMOTIONS,\n    payload: promotions\n})"]},"metadata":{},"sourceType":"module"}